import cv2
import numpy as np
from sklearn.cluster import KMeans

def apply_segmentation(frame, num_clusters=8):
    """
    Apply image segmentation to a frame using k-means clustering.
    """
    # Reshape the frame to 2D
    frame_2D = frame.reshape((-1, 3))

    # Convert to float
    frame_2D = np.float32(frame_2D)

    # Define k-means model
    kmeans = KMeans(n_clusters=num_clusters)

    # Fit k-means model to the 2D frame
    kmeans.fit(frame_2D)

    # Get the segmented labels
    labels = kmeans.labels_

    # Reshape the labels back to 2D
    labels = labels.reshape(frame.shape[:2])

    # Define the color range for each cluster
    color_range = 256 // num_clusters

    # Create a new blank image for the segmented image
    segmented_image = np.zeros(frame.shape, dtype=np.uint8)

    # Assign each pixel in the segmented image a color based on its cluster
    for i in range(num_clusters):
        segmented_image[labels == i] = color_range * i

    return segmented_image

def segment_video():
    """
    Capture video from the laptop camera and apply image segmentation to each frame.
    """
    # Open the laptop camera
    cap = cv2.VideoCapture(0)

    # Check if the camera is opened successfully
    if not cap.isOpened():
        print("Error: Could not open the laptop camera.")
        return

    while(True):
        # Capture frame-by-frame
        ret, frame = cap.read()

        # Apply segmentation to the frame
        segmented_frame = apply_segmentation(frame)

        # Display the segmented frame
        cv2.imshow('Segmented Video', segmented_frame)

        # Break the loop if 'q' key is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the camera and close all windows
    cap.release()
    cv2.destroyAllWindows()

# Call the function to start the segmentation
segment_video()

# Instance segmentation
import cv2
import pixellib 
from pixellib.instance import instance_segmentation
segment_image = instance_segmentation()
segment_image.load_model("mask_rcnn_coco.h5")
camera = cv2.VideoCapture(0)

while camera.isOpened():
    res, frame = camera.read()
    result = segment_image.segmentFrame(frame, show_bboxes=True)
    image = result[1]
    cv2.imshow('Image Segmentation', image)

    if cv2.waitKey(10) & 0xFF == ord('q'):
        break

camera.release()
cv2.destroyAllWindows()

#using grabcut algorithm
import cv2
import numpy as np

# Function to perform segmentation on a frame using GrabCut
def segment_frame(frame):
    # Create a mask initialized with zeros
    mask = np.zeros(frame.shape[:2], np.uint8)

    # Define rectangle for initial segmentation
    rect = (50, 50, frame.shape[1] - 50, frame.shape[0] - 50)

    # Initialize background and foreground models for GrabCut
    bgd_model = np.zeros((1, 65), np.float64)
    fgd_model = np.zeros((1, 65), np.float64)

    # Apply GrabCut algorithm
    cv2.grabCut(frame, mask, rect, bgd_model, fgd_model, 5, cv2.GC_INIT_WITH_RECT)

    # Modify mask to create a binary mask for foreground
    mask2 = np.where((mask == 2) | (mask == 0), 0, 1).astype('uint8')

    return mask2

# Open video capture
cap = cv2.VideoCapture(0)  # Use 0 for the default camera

while True:
    # Read a frame from the video stream
    ret, frame = cap.read()

    # Perform segmentation on the frame
    mask = segment_frame(frame)

    # Apply the mask to the original frame
    result = cv2.bitwise_and(frame, frame, mask=mask * 255)

    # Display the original frame and the segmented result
    cv2.imshow('Original', frame)
    cv2.imshow('Segmentation', result)

    # Break the loop if 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture object and close all windows
cap.release()
cv2.destroyAllWindows()
